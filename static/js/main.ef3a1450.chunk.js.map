{"version":3,"sources":["components/InfoBox/index.tsx","components/MapCircle/index.tsx","components/Map/index.tsx","components/Table/index.tsx","services/api.ts","components/LineGraph/index.tsx","utils/functions.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["InfoBox","title","cases","total","active","uiType","onClick","Card","className","CardContent","Typography","color","gutterBottom","caseTypeColours","hex","multiplier","recovered","deaths","MapCircle","data","casesType","map","country","index","Circle","key","toString","center","countryInfo","lat","long","fillOpacity","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","numeral","format","Map","zoom","countries","TileLayer","attribution","url","Table","props","getCountries","a","fetch","response","json","console","log","getCovidInfo","getCovidInfoByCountryCode","countryCode","getCovidHistory","days","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetchCovidHistory","length","datasets","backgroundColor","borderColor","sortData","sortedData","sort","b","prettyPrintStat","stat","App","setCountries","setCountry","undefined","covidInfo","setCovidInfo","tableData","setTableData","mapCountries","setMapCountries","lng","mapData","setMapData","setCasesType","countryList","name","iso3","unshift","getCountriesList","fetchCovidInfo","onCountryChange","event","target","FormControl","variant","Select","onChange","MenuItem","todayCases","e","todayRecovered","todayDeaths","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ef3a1450.chunk.js","sourcesContent":["import React, { FunctionComponent, MouseEventHandler } from \"react\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\n\nimport \"./InfoBox.scss\";\n\ninterface Props {\n  title: string;\n  cases: string;\n  total: string;\n  active: boolean;\n  uiType: \"success\" | \"alert\";\n  onClick: MouseEventHandler;\n}\n\nconst InfoBox: FunctionComponent<Props> = ({\n  title,\n  cases = 0,\n  total = 0,\n  active,\n  uiType,\n  onClick,\n}) => {\n  return (\n    <Card\n      className={`info-box ${active && `info-box--selected-${uiType}`}`}\n      onClick={onClick}\n    >\n      <CardContent>\n        <Typography\n          className=\"info-box__title\"\n          color=\"textSecondary\"\n          gutterBottom\n        >\n          {title}\n        </Typography>\n        {/* <Typography variant=\"h3\" component=\"h3\"> */}\n        <h2 className=\"info-box__cases\">{cases}</h2>\n        {/* </Typography> */}\n        <Typography className=\"info-box__total\" color=\"textSecondary\">\n          {total} Total\n        </Typography>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default InfoBox;\n","import React, { FunctionComponent } from \"react\";\nimport { Circle, Popup } from \"react-leaflet\";\nimport numeral from \"numeral\";\n\nimport { CovidInfo } from \"../../utils/interfaces\";\n\nimport \"./MapCircle.scss\";\n\ninterface Props {\n  data: CovidInfo[];\n  casesType?: \"cases\" | \"deaths\" | \"recovered\";\n}\n\nconst caseTypeColours = {\n  cases: {\n    hex: \"#CC1034\",\n    multiplier: 800,\n  },\n  recovered: {\n    hex: \"#7dd71d\",\n    multiplier: 1200,\n  },\n  deaths: {\n    hex: \"#fb4443\",\n    multiplier: 2000,\n  },\n};\n\nconst MapCircle: FunctionComponent<Props> = ({ data, casesType = \"cases\" }) => {\n  return (\n    <>\n      {data.map((country: any, index: number) => (\n        <Circle\n          key={index.toString()}\n          center={[country.countryInfo.lat, country.countryInfo.long]}\n          fillOpacity={0.4}\n          color={caseTypeColours[casesType].hex}\n          fillColor={caseTypeColours[casesType].hex}\n          radius={\n            Math.sqrt(country[casesType]) *\n            caseTypeColours[casesType].multiplier\n          }\n        >\n          <Popup>\n            <div className=\"info-container\">\n              <div\n                className=\"info-container__flag\"\n                style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\n              />\n              <div className=\"info-container__name\">{country.country}</div>\n              <div className=\"info-container__stats\">\n                Cases: {numeral(country.cases).format(\"0,0\")}\n              </div>\n              <div className=\"info-container__stats\">\n                Recovered: {numeral(country.recovered).format(\"0,0\")}\n              </div>\n              <div className=\"info-container__stats\">\n                Deaths: {numeral(country.deaths).format(\"0,0\")}\n              </div>\n            </div>\n          </Popup>\n        </Circle>\n      ))}\n    </>\n  );\n};\n\nexport default MapCircle;\n","import React, { FunctionComponent } from \"react\";\nimport { Map as LeafletMap, TileLayer } from \"react-leaflet\";\nimport { LatLngExpression } from \"leaflet\";\nimport MapCircle from \"../MapCircle\";\nimport { CovidInfo } from \"../../utils/interfaces\";\n\nimport \"./Map.scss\";\n\ninterface Props {\n  center: LatLngExpression;\n  zoom: number;\n  countries: CovidInfo[];\n  casesType: \"cases\" | \"deaths\" | \"recovered\";\n}\n\nconst Map: FunctionComponent<Props> = ({ center, zoom, countries, casesType }) => {\n  return (\n    <div className=\"map\">\n      <LeafletMap center={center} zoom={zoom}>\n        <TileLayer\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        <MapCircle data={countries} casesType={casesType}/>\n      </LeafletMap>\n    </div>\n  );\n};\n\nexport default Map;\n","import React from \"react\";\nimport { CovidInfo } from \"../../utils/interfaces\";\nimport \"./Table.scss\";\n\ninterface Props {\n  countries: CovidInfo[];\n}\n\nconst Table = (props: Props) => {\n  return (\n    <div className=\"table\">\n      <table>\n        <tbody>\n          {props?.countries.map(({ country, cases }, index: number) => (\n            <tr key={index.toString()}>\n              <td>{country}</td>\n              <td>\n                <strong>{cases}</strong>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default Table;\n","const getCountries = async () => {\n  try {\n    const response = await fetch(\"https://disease.sh/v3/covid-19/countries\");\n    const data = await response.json();\n    return data;\n  } catch (err) {\n    console.log(err);\n    return [];\n  }\n};\n\nconst getCovidInfo = async () => {\n  try {\n    const response = await fetch(`https://disease.sh/v3/covid-19/all`);\n    const data = await response.json();\n    return data;\n  } catch (err) {\n    console.log(err);\n    return [];\n  }\n};\n\nconst getCovidInfoByCountryCode = async (countryCode: string) => {\n  try {\n    const response = await fetch(\n      `https://disease.sh/v3/covid-19/countries/${countryCode}`\n    );\n    const data = await response.json();\n    return data;\n  } catch (err) {\n    console.log(err);\n    return [];\n  }\n};\n\nconst getCovidHistory = async (days: number) => {\n  try {\n    const response = await fetch(\n      `https://disease.sh/v3/covid-19/historical/all?lastdays=${days}`\n    );\n    const data = await response.json();\n    return data;\n  } catch (err) {\n    console.log(err);\n    return [];\n  }\n};\n\nexport {\n  getCountries,\n  getCovidInfo,\n  getCovidInfoByCountryCode,\n  getCovidHistory,\n};\n","import React, { useEffect, useState } from \"react\";\nimport { Line, ChartData } from \"react-chartjs-2\";\nimport numeral from \"numeral\";\n\nimport { getCovidHistory } from \"../../services/api\";\n\ninterface Props {\n  className?: string;\n  casesType: \"cases\" | \"deaths\" | \"recovered\";\n}\n\ninterface IHistory {\n  cases: { [key: number]: number }[];\n  deaths: { [key: number]: number }[];\n  recovered: { [key: number]: number }[];\n}\n\nconst options = {\n  legend: {\n    display: false,\n  },\n  elements: {\n    point: {\n      radius: 0,\n    },\n  },\n  maintainAspectRatio: false,\n  tooltips: {\n    mode: \"index\",\n    intersect: false,\n    callbacks: {\n      label: (tooltipItem: any, data: any) => {\n        return numeral(tooltipItem.value).format(\"+0,0\");\n      },\n    },\n  },\n  scales: {\n    xAxes: [\n      {\n        type: \"time\",\n        time: {\n          format: \"MM/DD/YY\",\n          tooltipFormat: \"ll\",\n        },\n      },\n    ],\n    yAxes: [\n      {\n        gridLines: {\n          display: false,\n        },\n        ticks: {\n          callback: (value: any, index: any, values: any) => {\n            return numeral(value).format(\"0a\");\n          },\n        },\n      },\n    ],\n  },\n};\n\nconst buildChartData = (\n  data: any,\n  casesType: \"cases\" | \"deaths\" | \"recovered\" = \"cases\"\n) => {\n  const chartData = [];\n  let lastDataPoint: number | undefined;\n  for (let date in data.cases) {\n    if (lastDataPoint) {\n      const newDataPoint = {\n        x: date,\n        y: data[casesType][date] - lastDataPoint,\n      };\n      chartData.push(newDataPoint);\n    }\n    lastDataPoint = data[casesType][date];\n  }\n  return chartData;\n};\n\nconst LineGraph = (props: Props) => {\n  const [data, setData] = useState<ChartData<any>>([]);\n\n  useEffect(() => {\n    const fetchCovidHistory = async () => {\n      const response: IHistory = await getCovidHistory(120);\n      const chartData = buildChartData(response, props.casesType);\n      setData(chartData);\n    };\n\n    fetchCovidHistory();\n  }, [props.casesType]);\n\n  return (\n    <div className={props.className}>\n      {data?.length && (\n        <Line\n          data={{\n            datasets: [\n              {\n                backgroundColor: \"rgba(204,16,52,0.5)\",\n                borderColor: \"#CC1034\",\n                data: data,\n              },\n            ],\n          }}\n          options={options}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default LineGraph;\n\n// TODO: Fix type issues\n","import numeral from \"numeral\";\nimport { CovidInfo } from \"./interfaces\";\n\nconst sortData = (data: CovidInfo[]): CovidInfo[] => {\n  const sortedData: CovidInfo[] = [...data];\n  sortedData.sort((a: CovidInfo, b: CovidInfo) => (a.cases > b.cases ? -1 : 1));\n  return sortedData;\n};\n\nconst prettyPrintStat = (stat: number) =>\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\n\nexport { sortData, prettyPrintStat };\n","import React, { useEffect, useState, ChangeEvent } from \"react\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport InfoBox from \"./components/InfoBox\";\nimport Map from \"./components/Map\";\nimport Table from \"./components/Table\";\nimport LineGraph from \"./components/LineGraph\";\n\nimport {\n  getCountries,\n  getCovidInfo,\n  getCovidInfoByCountryCode,\n} from \"./services/api\";\n\nimport { sortData, prettyPrintStat } from \"./utils/functions\";\nimport { CovidInfo } from \"./utils/interfaces\";\n\nimport \"leaflet/dist/leaflet.css\";\nimport \"./App.scss\";\n\ninterface Country {\n  name: string;\n  value: string;\n}\n\ninterface CountryListResponse {\n  country: string;\n  countryInfo: { iso3: string };\n}\n\nfunction App() {\n  const [countries, setCountries] = useState<Country[]>([]);\n  const [country, setCountry] = useState<string>(\"\"); // https://material-ui.com/guides/typescript/\n  const [covidInfo, setCovidInfo] = useState<CovidInfo | undefined>(undefined);\n  const [tableData, setTableData] = useState<CovidInfo[]>([]);\n  const [mapCountries, setMapCountries] = useState<CovidInfo[]>([]);\n  const [mapData, setMapData] = useState({\n    lat: 34.80746,\n    lng: -40.4796,\n    zoom: 3,\n  });\n  const [casesType, setCasesType] = useState<\"cases\" | \"deaths\" | \"recovered\">(\n    \"cases\"\n  );\n\n  useEffect(() => {\n    const getCountriesList = async () => {\n      const response: CovidInfo[] = await getCountries();\n\n      const countryList = response.map((country: CovidInfo) => ({\n        name: country.country,\n        value: country.countryInfo.iso3,\n      }));\n\n      countryList.unshift({ name: \"Woldwide\", value: \"worldWide\" });\n\n      setCountries(countryList);\n      const sortedData: CovidInfo[] = sortData(response);\n      setTableData(sortedData);\n      setMapCountries(response);\n      setCountry(\"worldWide\");\n    };\n\n    getCountriesList();\n  }, []);\n\n  useEffect(() => {\n    const fetchCovidInfo = async () => {\n      const response = await getCovidInfo();\n      setCovidInfo(response);\n    };\n    fetchCovidInfo();\n  }, []);\n\n  const onCountryChange = async (\n    event: ChangeEvent<{\n      name?: string | undefined;\n      value: unknown;\n    }>\n  ) => {\n    const countryCode = event.target.value as string; // https://github.com/mui-org/material-ui/issues/16065\n\n    let response: CovidInfo;\n    if (countryCode === \"worldWide\") {\n      response = await getCovidInfo();\n    } else {\n      response = await getCovidInfoByCountryCode(countryCode);\n      setMapData({\n        lat: response.countryInfo.lat,\n        lng: response.countryInfo.long,\n        zoom: 4,\n      });\n    }\n    setCovidInfo(response);\n    setCountry(event.target.value as string);\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n        <div className=\"app__header\">\n          <h1>COVID-19 TRACKER</h1>\n          <FormControl className=\"app__drop-down\" variant=\"outlined\">\n            <Select onChange={onCountryChange} value={country}>\n              {countries.map((country: Country, index: number) => {\n                return (\n                  <MenuItem key={index.toString()} value={country.value}>\n                    {country.name}\n                  </MenuItem>\n                );\n              })}\n            </Select>\n          </FormControl>\n        </div>\n        <div className=\"app__stats\">\n          <InfoBox\n            title=\"Coronavirus cases\"\n            uiType=\"alert\"\n            active={casesType === \"cases\"}\n            cases={prettyPrintStat(covidInfo?.todayCases || 0)}\n            total={prettyPrintStat(covidInfo?.cases || 0)}\n            onClick={(e) => setCasesType(\"cases\")}\n          />\n          <InfoBox\n            title=\"Recovered\"\n            uiType=\"success\"\n            active={casesType === \"recovered\"}\n            cases={prettyPrintStat(covidInfo?.todayRecovered || 0)}\n            total={prettyPrintStat(covidInfo?.recovered || 0)}\n            onClick={(e) => setCasesType(\"recovered\")}\n          />\n          <InfoBox\n            title=\"Deaths\"\n            uiType=\"alert\"\n            active={casesType === \"deaths\"}\n            cases={prettyPrintStat(covidInfo?.todayDeaths || 0)}\n            total={prettyPrintStat(covidInfo?.deaths || 0)}\n            onClick={(e) => setCasesType(\"deaths\")}\n          />\n        </div>\n        <Map\n          center={[mapData.lat, mapData.lng]}\n          zoom={mapData.zoom}\n          countries={mapCountries}\n          casesType={casesType}\n        />\n      </div>\n      <Card className=\"app__right\">\n        <CardContent>\n          <div>\n            <h3>Live cases by country</h3>\n            <Table countries={tableData} />\n          </div>\n          <h3 className=\"app__graph-title\">Worldwide new cases {casesType}</h3>\n          <LineGraph className=\"app__graph\" casesType={casesType} />\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}